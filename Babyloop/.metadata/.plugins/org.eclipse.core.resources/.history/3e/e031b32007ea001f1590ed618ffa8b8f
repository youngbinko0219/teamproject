package com.babyloop.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.babyloop.product.repository.ImgDTO;
import com.babyloop.product.repository.IImgMapper;
import com.babyloop.utils.ImgFunctions;

@Service
public class ProductImageService {

    @Autowired
    private FirebaseStorageService firebaseStorage;

    @Autowired
    private IImgMapper imgDAO;

    /**
     * 이미지 파일 배열을 받아 Firebase Storage에 업로드한 후 DB에 이미지 정보를 저장합니다.
     *
     * @param files     업로드할 파일 배열 (null일 수 있음)
     * @param productId 제품 ID (이미 DB에 등록된 상태)
     * @param imageType 이미지 유형 ("main", "sub", "desc" 등)
     */
    public void processImageFiles(MultipartFile[] files, int productId, String imageType) {
        if (files != null) {
            // 메인 이미지인 경우에만 단일 파일 제한
            if ("main".equalsIgnoreCase(imageType) && files.length > 1) {
                throw new IllegalArgumentException("메인 이미지는 한 개만 업로드 가능합니다.");
            }else if{
            	
            }else if("desc".equalsIgnoreCase(imageType) && files.length > 1){
            }
            	throw new IllegalArgumentException("상세 이미지는 한 개만 업로드 가능합니다.");
            }
            for (MultipartFile file : files) {
                // UUID 기반 고유 파일명 생성
                String fileName = ImgFunctions.getUuid() + "_" + file.getOriginalFilename();
                // Firebase Storage에 파일 업로드 (파일과 고유 파일명을 함께 전달)
                String imageUrl = firebaseStorage.uploadFile(file, fileName);

                // ImgDTO 객체 생성 후 값 설정
                ImgDTO imgDTO = new ImgDTO();
                imgDTO.setProduct_id(productId);
                // 이미지 유형에 따라 다른 컬럼에 값을 저장할 수 있도록 설정
                if ("main".equalsIgnoreCase(imageType)) {
                    imgDTO.setMain_img(imageUrl);
                } else if ("sub".equalsIgnoreCase(imageType)) {
                    imgDTO.setSub_img(imageUrl);
                } else if ("desc".equalsIgnoreCase(imageType)) {
                    imgDTO.setDesc_img(imageUrl);
                }

                // DB에 이미지 정보 저장
                imgDAO.insertImgs(imgDTO);
            }
        }
    }
}
