package com.babyloop.jwt;

import io.jsonwebtoken.Claims;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

@Component
public class JwtFilter extends OncePerRequestFilter {
    
    private final JwtUtil jwtUtil;

    // JWT 검증이 필요 없는 엔드포인트 리스트
    private static final List<String> EXCLUDED_PATHS = Arrays.asList(
        "/auth/login", "/auth/signup", "/auth/logout",
        "/product/list/**"
    );

    public JwtFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {

        String requestURI = request.getRequestURI();

        // JWT 검증이 필요 없는 경로인지 확인
        if (EXCLUDED_PATHS.stream().anyMatch(requestURI::startsWith)) {
            chain.doFilter(request, response);
            return;
        }

        // Authorization 헤더 확인
        String authorizationHeader = request.getHeader("Authorization");

        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            SecurityContextHolder.clearContext(); // 인증 실패 시 보안 강화
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "JWT Token is missing or invalid");
            return;
        }

        // JWT 검증
        String token = authorizationHeader.substring(7);
        if (jwtUtil.isTokenValid(token)) {
            Claims claims = jwtUtil.extractClaims(token);
            String userId = claims.getSubject();

            UsernamePasswordAuthenticationToken authentication =
                    new UsernamePasswordAuthenticationToken(userId, null, null);
            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

            SecurityContextHolder.getContext().setAuthentication(authentication);
        } else {
            SecurityContextHolder.clearContext(); // 인증 실패 시 보안 강화
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid JWT Token");
            return;
        }

        chain.doFilter(request, response);
    }
}
